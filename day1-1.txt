The console object provides us with several different methods :
log()
error()
warn()
clear()
time() and timeEnd()
table()
count()
group() and groupEnd()
custom console logs

console.log()
Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.
Ex: console.log('abc');

console.error()
Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.
Ex: console.error('This is a simple error'); 

console.warn()
Used to log warning message to the console. By default the warning message will be highlighted with yellow color.
Ex: console.warn('This is a warning.'); 

console.clear()
Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like : ‘Console was cleared’ while in firefox no message is returned.
Ex: console.clear(); 

console.time() and console.timeEnd()
Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided by the javascript console object. They take a label which must be same, and the code inside can be anything( function, object, simple console).
Ex: console.time('abc'); 
 let fun =  function(){ 
     console.log('fun is running'); 
 } 
 let fun2 = function(){ 
     console.log('fun2 is running..'); 
 } 
 fun(); // calling fun(); 
 fun2(); // calling fun2(); 
console.timeEnd('abc');

console.table()
This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.
Ex:console.table({'a':1, 'b':2});

console.count()
This method is used to count the number that the function hit by this counting method.
Ex: for(let i=0;i<5;i++){ 
    console.count(i); 
} 

console.group() and console.groupEnd()
group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. Just like the time() and the timeEnd() they also accepts label, again of same value.
Ex: console.group('simple'); 

Custom Console Logs
User can add Styling to the console logs in order to make logs Custom . The Syntax for it is to add the css styling as a parameter to the logs which will replace %c in the logs as shown in the example below .
Ex: const spacing = '10px'; 
  const styles =  
        `padding: ${spacing}; background-color: white; color: green; font-style:  
         italic; border: 1px solid black; font-size: 2em;`; 
  console.log('%cGeeks for Geeks', styles); 